{
  "comments": [
    {
      "key": {
        "uuid": "3aa0d159_7074589c",
        "filename": "src/video/renderer.h",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 11
      },
      "writtenOn": "2015-10-13T22:18:33Z",
      "side": 1,
      "message": "Can this be moved inside of Renderer?\n\nBy LRC coding standards, that should be Renderer::Frame instead of RendererFrame. This doesn\u0027t change much, but this avoid replicating the first part of the names in helper classes like this. The class is also definitely a logic child class of Renderer and make no sense outside of its context\n\nAlso, why is it required, what does it bring the QByteArray class doesn\u0027t?",
      "revId": "456cfe4294e5c907bb5943494ea4c0c75ea79ed3",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aa0d159_f0f868c6",
        "filename": "src/video/renderer.h",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 3
      },
      "writtenOn": "2015-10-14T01:23:04Z",
      "side": 1,
      "message": "Moving into Renderer::Frame is an idea, I will think about that tomorrow (too late right now ;-)).\n\nAbout why moved from QByteArray (the long explanation): the problem is how Renderer\u0027s work (data handling difference between direct and shm Renderer\u0027s) and how LRC and deamon communicate.\nThis patch introduces a \"Downfall\" concept (named from my own, from a 1970\u0027s french game named \"Dix de chute\", yes! check here: http://lescopainsd-abord.over-blog.com/article-le-jeu-dix-de-chute-par-didile-81914822.html ).\n\nSo, the idea is the frame data (the real memory place where the picture reside) is never owned by the same place. As in Downfall, it\u0027s like a token given atomically from one layer to another layer (like gears in the game).\nThis concept protects against invalid memory storage seen in  multi-threaded layers, specially seen in the use case of conferencing and direct-rendering on Windows, where 4 threads pass frames between them!\nNow: we need a unique object/class that can be understood both by LRC and daemon. This object need to carries sometime a storage (std::vector in case of direct-rendering), sometime only a ptr without embeeded owner-ship (as in shm).\nSo no Qt classes can do that as Qt is not used by daemon.\nI\u0027ve choosen a structure containing both storage and raw ptr, and using \"moveable\" C++11 concept to implements my Downfall game.\n\nYes I tried ton of implementations to keep QByteArray but none of them work due to rules as explained before.",
      "parentUuid": "3aa0d159_7074589c",
      "revId": "456cfe4294e5c907bb5943494ea4c0c75ea79ed3",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aa0d159_9031e4a4",
        "filename": "src/video/renderer.h",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 3
      },
      "writtenOn": "2016-01-20T16:58:38Z",
      "side": 1,
      "message": "finally I cannot put Frame into Renderer due to Renderer class is forwarded in videorenderer_p.h header. I can\u0027t forward Renderer::Frame.\nSo I proposed a new patchset with Video::Frame class",
      "parentUuid": "3aa0d159_f0f868c6",
      "revId": "456cfe4294e5c907bb5943494ea4c0c75ea79ed3",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    }
  ]
}