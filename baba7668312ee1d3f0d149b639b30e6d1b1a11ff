{
  "comments": [
    {
      "key": {
        "uuid": "c7f64436_136190bd",
        "filename": "src/api/peerdiscoverymodel.h",
        "patchSetId": 16
      },
      "lineNbr": 2,
      "author": {
        "id": 220
      },
      "writtenOn": "2019-06-14T18:53:48Z",
      "side": 1,
      "message": "wrong copyright data",
      "range": {
        "startLine": 2,
        "startChar": 20,
        "endLine": 2,
        "endChar": 24
      },
      "revId": "baba7668312ee1d3f0d149b639b30e6d1b1a11ff",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e7a9bf1_f61283d1",
        "filename": "src/api/peerdiscoverymodel.h",
        "patchSetId": 16
      },
      "lineNbr": 68,
      "author": {
        "id": 220
      },
      "writtenOn": "2019-06-14T18:53:48Z",
      "side": 1,
      "message": "To replace with an enum. This avoid dead values",
      "range": {
        "startLine": 68,
        "startChar": 53,
        "endLine": 68,
        "endChar": 56
      },
      "revId": "baba7668312ee1d3f0d149b639b30e6d1b1a11ff",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3cd69d4_64ebf22f",
        "filename": "src/api/peerdiscoverymodel.h",
        "patchSetId": 16
      },
      "lineNbr": 71,
      "author": {
        "id": 220
      },
      "writtenOn": "2019-06-14T18:53:48Z",
      "side": 1,
      "message": "Can be stored into the pimpl_ if this attribute change, the API will not change",
      "range": {
        "startLine": 70,
        "startChar": 8,
        "endLine": 71,
        "endChar": 27
      },
      "revId": "baba7668312ee1d3f0d149b639b30e6d1b1a11ff",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae32aac_1e76b4a7",
        "filename": "src/peerdiscoverymodel.cpp",
        "patchSetId": 16
      },
      "lineNbr": 79,
      "author": {
        "id": 220
      },
      "writtenOn": "2019-06-14T18:53:48Z",
      "side": 1,
      "message": "if (accountID \u003d\u003d accountId_) emit, else you will receive each contacts N times where N is the number of accounts",
      "range": {
        "startLine": 78,
        "startChar": 1,
        "endLine": 79,
        "endChar": 24
      },
      "revId": "baba7668312ee1d3f0d149b639b30e6d1b1a11ff",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9759364e_959d6b48",
        "filename": "src/peerdiscoverymodel.cpp",
        "patchSetId": 16
      },
      "lineNbr": 97,
      "author": {
        "id": 220
      },
      "writtenOn": "2019-06-14T18:53:48Z",
      "side": 1,
      "message": "std::vector\u003cPeerContact\u003e\nPeerDiscoveryModel::getNearbyPeers() const\n{\n    const MapStringString nearbyPeers \u003d ConfigurationManager::instance().getNearbyPeers(QString::fromStdString(accountID_));\n    std::vector\u003cPeerContact\u003e result;\n    result.reserve(nearbyPeers.size());\n\n    for (const auto\u0026 peer: nearbyPeers.toStdMap()) {\n        result.emplace_back(PeerContact {\n            peer.first.toStdString(), peer.second.toStdString()\n        });\n    }\n\n    return result;\n}\n\n\nAlso: avoid push_back and prefer emplace_back instead.\nFor possible big maps, add reserve() when you use a vector to avoid a lot of resize.",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 97,
        "endChar": 26
      },
      "revId": "baba7668312ee1d3f0d149b639b30e6d1b1a11ff",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    }
  ]
}